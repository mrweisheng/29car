# Cursor Rules for 29car Project

## 🚫 严格禁止的行为

### 1. 项目启动相关
- **绝对禁止** 使用 `run_terminal_cmd` 启动项目
- **绝对禁止** 执行 `npm run dev`、`npm start`、`vite` 等启动命令
- **绝对禁止** 使用任何可能启动开发服务器的命令
- 项目始终处于运行状态，具有热重载功能

### 2. 端口管理
- **绝对禁止** 创建新的端口或服务
- **绝对禁止** 修改现有端口配置
- 用户负责手动管理所有端口和服务

## ✅ 允许的行为

### 1. 代码修改
- 修改 Vue 组件文件（.vue）
- 修改 JavaScript/TypeScript 文件（.js/.ts）
- 修改样式文件（.scss/.css）
- 修改配置文件（vite.config.js, package.json 等）

### 2. 文件操作
- 创建新文件
- 删除文件
- 重命名文件
- 搜索和读取文件内容

### 3. 代码分析
- 使用 `codebase_search` 搜索代码
- 使用 `grep_search` 查找特定文本
- 分析代码结构和依赖关系

## 🔧 开发工作流程

### 1. 问题诊断
- 仔细阅读用户描述的问题
- 使用搜索工具定位相关代码
- 分析问题的根本原因

### 2. 解决方案实施
- 分步骤修改代码，避免大段代码一次性修改
- 每次修改后验证功能完整性
- 确保修改不会引入新的问题

### 3. 代码质量保证
- 遵循项目现有的代码风格
- 保持组件的响应式设计
- 确保国际化功能正常工作

## 📋 修改代码时的注意事项

### 1. 分步修改原则
- 对于复杂的修改，分多次完成
- 每次修改后验证功能
- 避免一次性修改过多内容

### 2. 功能完整性检查
- 修改完成后检查代码逻辑
- 确保没有遗漏必要的导入或依赖
- 验证组件的响应式特性

### 3. 国际化维护
- 修改涉及文本的代码时，同步更新国际化文件
- 确保所有语言文件结构一致
- 避免键名冲突和路径不一致

## 🚨 违反规则的后果

如果违反上述规则：
1. 立即停止当前操作
2. 向用户道歉并解释错误
3. 重新开始，严格遵循规则
4. 确保不再重复相同的错误

## 📝 总结

**核心原则：只修改代码，绝不启动项目**

- 项目始终运行，具有热重载
- 所有代码修改都会自动生效
- 用户负责项目启动和停止
- 专注于代码质量和功能完善

记住：**修改代码是唯一任务，启动项目是绝对禁忌**。
